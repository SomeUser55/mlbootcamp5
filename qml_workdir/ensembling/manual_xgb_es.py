import datetime
import numpy as np
import pandas as pd

import os
import sys

from sklearn import model_selection

sys.path.insert(0, os.getcwd())

from  qml_workdir.classes.config import config
from qml.cv import QCV
from qml.models import QXgb
from qml_workdir.classes.models import qm

cv = QCV(qm)

# X = pd.read_csv(config.QML_TRAIN_X_FILE_MASK.format(66), index_col='id')
# Y = pd.read_csv(config.QML_TRAIN_Y_FILE_MASK.format(66), index_col='id')
# test = pd.read_csv(config.QML_TEST_X_FILE_MASK.format(66), index_col='id')
# #all = pd.concat([train, test])
#
# splits = []
# kf = model_selection.ShuffleSplit(200, 0.05, random_state=1000)
# for ids1, ids2 in kf.split(Y):
#     splits.append([sorted(Y.index[ids1]), sorted(Y.index[ids2])])
#
# #splits = cv._load_splits(Y)
#
#
# for train_indexes, test_indexes in splits:
#     X_train = X.loc[train_indexes]
#     Y_train = Y.loc[train_indexes][config.QML_RES_COL]
#     X_test = X.loc[test_indexes]
#     Y_test = Y.loc[test_indexes][config.QML_RES_COL]
#
#     model = qm._load_model(1747)
#     model.params['lr_decay'] = 0.0001
#     model.params['early_stopping_rounds'] = 100
#     model.params['num_boost_round'] = 10000
#     model.fit(X_train, Y_train, seed=1000, eval_set=[(X_test, Y_test)], verbose_eval=100)
#     np.savetxt('qml_workdir/ensembling/manual01/{}'.format(np.random.randint(0, 2000000000)), model.predict(test))




res = []
for i in [502726,
2439160,
11242691,
11770200,
17190476,
23015383,
45662756,
57360980,
68669485,
81215669,
108388894,
117702585,
140170475,
147672183,
167498248,
175861976,
190180095,
198318573,
206893351,
217114116,
218777382,
235250357,
259971554,
274712803,
285667968,
287738267,
302842154,
310874026,
352157827,
394972932,
397684532,
401162495,
424784136,
439486419,
444143452,
452632385,
458263267,
467307096,
478135178,
491825871,
492701243,
494616868,
499272548,
515768014,
524223770,
542488440,
555688235,
565959185,
569234305,
584613819,
584769852,
585724444,
604071889,
604939969,
620420026,
625910543,
634362163,
641059366,
652558407,
655252161,
662222975,
673754224,
674947261,
705511673,
706383927,
707461067,
737118199,
785015537,
789588026,
804713363,
807874755,
823380238,
830511945,
844611764,
878264270,
891636718,
892656234,
894362816,
899794783,
934116798,
949150992,
968516972,
972999720,
988136821,
1015652679,
1030089374,
1031893812,
1032111963,
1037097661,
1042286205,
1049415471,
1060846167,
1062440069,
1066897702,
1067529041,
1097258903,
1102936686,
1105924818,
1110107522,
1111328659,
1111450961,
1114131037,
1116948380,
1121710994,
1134436514,
1138529019,
1157573436,
1168629057,
1180826537,
1196042067,
1205685105,
1223084705,
1231269150,
1237075483,
1238035258,
1248601398,
1249272293,
1268523024,
1280471774,
1281022808,
1283094873,
1305682562,
1310815462,
1333356707,
1355764061,
1381981480,
1383907631,
1386678305,
1388824871,
1388986302,
1389435106,
1390177872,
1399456702,
1400263066,
1404724876,
1404868332,
1420673937,
1431865944,
1432839855,
1469109625,
1488835141,
1490391472,
1490598396,
1493102150,
1495146452,
1514110574,
1525683749,
1532762584,
1533632802,
1544038744,
1544848678,
1586087098,
1609491625,
1617825044,
1617902154,
1630828900,
1666843679,
1669947586,
1672185965,
1676547885,
1678755176,
1685300096,
1688063352,
1694165550,
1695094146,
1695416618,
1726984838,
1730466808,
1732206575,
1745662602,
1751945352,
1766947706,
1770157812,
1789393198,
1791265849,
1805910926,
1806871276,
1807810891,
1812640500,
1819181068,
1824063269,
1829113718,
1875395874,
1877902480,
1883174392,
1884090159,
1889632328,
1908028448,
1911112225,
1924834356,
1929027014,
1942721794,
1943100369,
1966922801,
1970985131,
1980979518,
1988244545,
1989728916,
1993254948,
1995120243]:
    res.append(np.loadtxt('qml_workdir/ensembling/manual01/{}'.format(i)))


res = [i.mean() for i in np.array(res).T]

np.savetxt('qml_workdir/ensembling/manual01/res200', res, fmt='%1.18f')
print(res)

